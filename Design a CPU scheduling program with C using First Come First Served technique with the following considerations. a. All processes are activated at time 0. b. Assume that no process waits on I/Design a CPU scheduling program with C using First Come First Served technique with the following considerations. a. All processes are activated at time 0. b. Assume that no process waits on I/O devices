#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int burst;      // CPU burst time
    int waiting;    // Waiting time
    int turnaround; // Turnaround time
};

void fcfs(struct Process proc[], int n) {
    // Calculate waiting and turnaround times
    proc[0].waiting = 0;
    proc[0].turnaround = proc[0].burst;
    
    for (int i = 1; i < n; i++) {
        proc[i].waiting = proc[i-1].turnaround;
        proc[i].turnaround = proc[i].waiting + proc[i].burst;
    }
}

void printResults(struct Process proc[], int n) {
    int total_wait = 0, total_turnaround = 0;
    
    printf("\nPID\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", 
               proc[i].pid, proc[i].burst, 
               proc[i].waiting, proc[i].turnaround);
        
        total_wait += proc[i].waiting;
        total_turnaround += proc[i].turnaround;
    }
    
    printf("\nAverage Waiting Time = %.2f\n", (float)total_wait/n);
    printf("Average Turnaround Time = %.2f\n", (float)total_turnaround/n);
}

int main() {
    int n;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process proc[n];
    
    // Input process details
    for (int i = 0; i < n; i++) {
        proc[i].pid = i+1;
        printf("Enter burst time for process %d: ", i+1);
        scanf("%d", &proc[i].burst);
    }
    
    // Perform FCFS scheduling
    fcfs(proc, n);
    
    // Print results
    printResults(proc, n);
    
    return 0;
}
