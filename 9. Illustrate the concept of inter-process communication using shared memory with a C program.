#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

int main() {
    // Create a unique key
    key_t key = ftok("shmfile", 65);

    // Create shared memory segment of size 1024 bytes
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    // Fork a child process
    pid_t pid = fork();

    if (pid > 0) {
        // Parent process writes to shared memory
        char *str = (char *)shmat(shmid, NULL, 0);
        printf("Parent: Writing to shared memory...\n");
        strcpy(str, "Hello from Parent Process!");
        shmdt(str); // Detach
        wait(NULL); // Wait for child
    } else if (pid == 0) {
        // Child process reads from shared memory
        sleep(1); // Ensure parent writes first
        char *str = (char *)shmat(shmid, NULL, 0);
        printf("Child: Read from shared memory: %s\n", str);
        shmdt(str); // Detach
