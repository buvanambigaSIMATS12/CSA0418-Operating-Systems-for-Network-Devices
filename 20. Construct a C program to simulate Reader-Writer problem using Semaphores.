#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex;     // Semaphore to protect read_count
sem_t writeLock; // Semaphore for writers (write access)
int read_count = 0; // Number of active readers

void* reader(void* arg) {
    int id = *((int*)arg);
    while (1) {
        sem_wait(&mutex);         // Lock access to read_count
        read_count++;
        if (read_count == 1) {
            sem_wait(&writeLock); // First reader locks writer
        }
        sem_post(&mutex);         // Release access to read_count

        // Critical Section (Reading)
        printf("Reader %d is reading...\n", id);
        sleep(1); // Simulate reading

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&writeLock); // Last reader unlocks writer
        }
        sem_post(&mutex);

        sleep(1); // Simulate time between reads
    }
}

void* writer(void* arg) {
    int id = *((int*)arg);
    while (1) {
        sem_wait(&writeLock); // Lock access for writing

        // Critical Section (Writing)
        printf("Writer %d is writing...\n", id);
        sleep(2); // Simulate writing

        sem_post(&writeLock); // Unlock

        sleep(2); // Simulate time between writes
    }
}

int main() {
    pthread_t r[5], w[2];
    int r_id[5] = {1, 2, 3, 4, 5};
    int w_id[2] = {1, 2};

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&writeLock, 0, 1);

    // Create reader threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&r[i], NULL, reader, &r_id[i]);
    }

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        pthread_create(&w[i], NULL, writer, &w_id[i]);
    }

    // Join threads (optional here due to infinite loops)
    for (int i = 0; i < 5; i++) {
        pthread_join(r[i], NULL);
    }

    for (int i = 0; i < 2; i++) {
        pthread_join(w[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writeLock);

    return 0;
}
