#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;
    int burst;
    int priority;  // Lower number = higher priority
    int waiting;
    int turnaround;
    bool completed;
};

void priority_schedule(struct Process proc[], int n) {
    int total_time = 0;
    int completed = 0;
    
    while (completed < n) {
        int highest_priority = -1;
        int highest_priority_val = 9999;  // Initialize with maximum possible priority value
        
        // Find process with highest priority (lowest number)
        for (int i = 0; i < n; i++) {
            if (!proc[i].completed && proc[i].priority < highest_priority_val) {
                highest_priority = i;
                highest_priority_val = proc[i].priority;
            }
        }
        
        if (highest_priority == -1) break;
        
        // Execute the highest priority process
        proc[highest_priority].waiting = total_time;
        proc[highest_priority].turnaround = total_time + proc[highest_priority].burst;
        total_time += proc[highest_priority].burst;
        proc[highest_priority].completed = true;
        completed++;
    }
}

void print_results(struct Process proc[], int n) {
    int total_wait = 0, total_turnaround = 0;
    
    printf("\nPID\tBurst\tPriority\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t\t%d\t%d\n", 
               proc[i].pid, proc[i].burst, proc[i].priority,
               proc[i].waiting, proc[i].turnaround);
        
        total_wait += proc[i].waiting;
        total_turnaround += proc[i].turnaround;
    }
    
    printf("\nAverage Waiting Time = %.2f\n", (float)total_wait/n);
    printf("Average Turnaround Time = %.2f\n", (float)total_turnaround/n);
}

int main() {
    int n;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process proc[n];
    
    for (int i = 0; i < n; i++) {
        proc[i].pid = i+1;
        proc[i].completed = false;
        printf("Enter burst time for process %d: ", i+1);
        scanf("%d", &proc[i].burst);
        printf("Enter priority for process %d (lower number = higher priority): ", i+1);
        scanf("%d", &proc[i].priority);
    }
    
    priority_schedule(proc, n);
    print_results(proc, n);
    
    return 0;
}
